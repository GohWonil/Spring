public class AbstractInterface {
}

abstract class AbstractClass {
  int state; // 일반 변수 (상태)

  abstract void abstractMethod(); // 추상 메서드

  void regularMethod() { // 구현
  }
}

interface MyInterface {
  int CONSTANT = 42; // 인터페이스는 상수만을 가질 수 있음

  void interfaceMethod(); // 인터페이스 메서드 (암묵적으로 public abstract)
}


/*
  추상 메서드 (Abstract Method) &&& 인터페이스 (Interface)

  클래스에서 사용:
    #추상 메서드는 추상 클래스 내에 선언됩니다.
    #추상 클래스는 일반적으로 추상 메서드와 일반 메서드를 포함하며, 추상 메서드를 하나 이상 가질 수 있습니다.
    *인터페이스는 인터페이스 내에서만 메서드를 선언할 수 있습니다.

  상태 (State):
    #추상 클래스는 일반 변수 (인스턴스 변수)를 가질 수 있으며, 이 변수들은 상태를 나타냅니다.
    *인터페이스는 상태를 가질 수 없습니다. 오직 상수만을 가질 수 있습니다.

  다중 상속:
    #자바에서는 단일 상속만 지원하므로 추상 클래스는 여러 클래스에서 상속 받을 수 없습니다.
    *자바에서는 다중 상속을 지원하지 않지만, 인터페이스는 여러 인터페이스를 구현할 수 있습니다.

  생성자:
    #추상 클래스는 생성자를 가질 수 있습니다.
    *인터페이스는 생성자를 가질 수 없습니다.

   접근 제어자:
    #추상 메서드는 public, protected, default, private 등의 접근 제어자를 가질 수 있습니다.
    *인터페이스 메서드는 기본적으로 public이며, 다른 접근 제어자를 가질 수 없습니다.


=====요약=====
추상 메서드는 클래스 내에서 선언되고, 클래스는 추상 클래스일 수 있습니다.
인터페이스는 오직 메서드의 선언만을 허용하며, 클래스는 여러 인터페이스를 구현할 수 있습니다.
추상 클래스는 상태(변수)를 가질 수 있지만, 인터페이스는 상태를 가질 수 없습니다.
추상 클래스는 생성자를 가질 수 있지만, 인터페이스는 생성자를 가질 수 없습니다.
추상 클래스는 단일 상속을 지원하며, 인터페이스는 다중 상속을 지원합니다.
*/
